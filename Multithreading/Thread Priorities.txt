package multithreading;

class clicker implements Runnable {
    long click = 0;
    private volatile boolean running = true;    // doesnâ€™t created in cache memory. It is stored and retrieved from RAM.
    Thread th;
   
    public clicker(int p) {
           setPriority(p);
    }
    
    public void start() {
        
        th.start();
    }
    
    public void run() {
        while(running) {
            click++;
        }
    }
    
    public void stop() {
        running = false;    // to stop the run()
    }
}

public class thread_priorities {
    public static void main(String args[]) {
           Thread.currentThread().setPriority(Thread.MAX_PRIORITY);   // main thread is set to MAX_PRIORITY
        
            clicker hi_obj1  = new clicker(Thread.NORM_PRIORITY + 2);
            Thread hi = new Thread(hi_obj1);
            
            clicker lo_obj1  = new clicker(Thread.NORM_PRIORITY + 2);
            Thread lo = new Thread(lo_obj1);
            
            lo.start();
            hi.start();
            
            try {
                     Thread.sleep(1000);
            }  catch (InterruptedException e) {
                    System.out.println("Main thread is interrupted");
            }
            
            lo.stop();
            hi.stop();
            
          // waiting for the child thread to terminate
          try {
              hi.join();
              lo.join();
          } catch (InterruptedException e ) {
              System.out.println("Interrupted exception caught");
          }
          
          System.out.println("Low priority thread  :  " + lo_obj1.click);
          System.out.println("High priority thread :  " + hi_obj1.click);
    }
}
